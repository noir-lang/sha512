// ror 28

// top 36 bits shifted down
// bottom 28 bits wrap

// pivot point is bits 24-30 (low 4, high 2)

// ror 34
// pivot point is bits 30-36 (low 4 , high 2)

// ror 39
// pivot point is bits 36-42 (low 3, high 3)

// ror 14
// pivot point is bits 12-18 (low 2, high 4)

// ror 18
// clean split, no pivot

// ror 41
// pivot point is bits 36-42 (low 5, high 1)

// ror 1
// pivot point is bits 0-6 (low 1, high 5)

// ror 8
// pivot point is bits 6-12 (low 2, high 4)

// right shift 7
// pivot point is bits 6-12 (low 1, high 5)

// ror 19
// pivot point is bits 18-24 (low 1, high 5)

// ror 61
// pivot point bits 60-61 (low 1, high 5)

// rightshift 6
// no pivot

// Summary
// (low 4, high 2)
// (low 5, high 1)
// (low 3, high 3)
// (low 2, high 4)
// (low 1, high 5)

// ^^ all of the above exist
// a 6-bit table is 2^12 = 4,096 gates = 8,192 gates to init

// we can also use extended representations

// S1 = e.ror6 ^ e.ror11 ^ e.ror25 = bit value in range 0-3 if added
// ch = (e&f)^(!e&g) = 0-4?

/*
| e | f | g | (e&f)^(!e&g) |
| 0 | 0 | 0 | 0 | 1
| 0 | 0 | 1 | 1 | 3
| 0 | 1 | 0 | 0 | 0
| 0 | 1 | 1 | 1 | 2
| 1 | 0 | 0 | 0 | 4
| 1 | 0 | 1 | 0 | 6
| 1 | 1 | 0 | 1 | 3
| 1 | 1 | 1 | 1 | 5

3e + 1 - f + 2g = 0 to 6 

// 0 - 6 and 0 - 3 = 0 to 27

// 0-27 is a 2-bit table (size 784)
// implies 32 lookups to convert out

// 0-3 and 0-3 for S0 + maj
// 0-15 = 4 bits = 3-bit table
// implies 22 lookups to convert out


// we can do...
// convert out of triple XOR = 6 bit tables = 11 lookups
// convert out of ch linear relation = 4 bit tables = 16 lookups
// convert out of maj = 6 bit table = 11 lookups

// 49 lookups to convert out
// convert in = 12 bit table = 11 lookups
// 60 lookups total = 120 gates + lots of fluff
// total = 27 lookups


// What tables do we need?

// 1: Convert into sparse representation
// Use bit widths of 1 to 8 inclusive and use these to rotate and shift while converting

// Each bit can range from 0 to 6 so we need a base 7 repr
*/

/*
majority conversion

maj := (a and b) xor (a and c) xor (b and c)

a b c maj
0 0 0 0
0 0 1 0
0 1 0 0
0 1 1 1
1 0 0 0
1 0 1 1
1 1 0 1
1 1 1 1

a + b + c. map 0 to 0, 1 to 0, 2 to 1, 3 to 1
*/

pub unconstrained fn get_decomposition<let BIT_WIDTH: u32>(input: u32) -> [u32; BIT_WIDTH] {
    let mut acc = input;
    let mut r: [u32; BIT_WIDTH] = [0; BIT_WIDTH];
    for i in 0..BIT_WIDTH {
        r[i] = acc & 1;
        acc = acc >> 1;
    }
    r
}
pub unconstrained fn compute_base4_conversion_table<let TABLE_ENTRIES: u32>() -> [u32; TABLE_ENTRIES] {
    let mut table: [u32; TABLE_ENTRIES] = [0; TABLE_ENTRIES];

    for i in 0..TABLE_ENTRIES {
        if (i & 1 == 1) {
            table[i] += 1;
        }
        if ((i >> 1) & 1 == 1) {
            table[i] += 4;
        }
        if ((i >> 2) & 1 == 1) {
            table[i] += 16;
        }
        if ((i >> 3) & 1 == 1) {
            table[i] += 64;
        }
        if ((i >> 4) & 1 == 1) {
            table[i] += 256;
        }
        if ((i >> 5) & 1 == 1) {
            table[i] += 1024;
        }
        if ((i >> 6) & 1 == 1) {
            table[i] += 4096;
        }
        if ((i >> 7) & 1 == 1) {
            table[i] += 16384;
        }
        if ((i >> 8) & 1 == 1) {
            table[i] += 65536;
        }
    }
    table
}

#[test]
fn make_table() {
    // Safety: no need to constrain this we're just computing+printing lookup table values
    unsafe {
        let t0 = compute_base4_conversion_table::<2>();
        let t1 = compute_base4_conversion_table::<4>();
        let t2 = compute_base4_conversion_table::<8>();
        let t3 = compute_base4_conversion_table::<16>();
        let t4 = compute_base4_conversion_table::<32>();
        let t5 = compute_base4_conversion_table::<64>();
        let t6 = compute_base4_conversion_table::<128>();
        let t7 = compute_base4_conversion_table::<256>();
        let t8 = compute_base4_conversion_table::<512>();

        println(f"pub global BASE4_ENCODE_1BIT_TABLE: [Field; 2] = {t0};");
        println(f"pub global BASE4_ENCODE_2BIT_TABLE: [Field; 4] = {t1};");
        println(f"pub global BASE4_ENCODE_3BIT_TABLE: [Field; 8] = {t2};");
        println(f"pub global BASE4_ENCODE_4BIT_TABLE: [Field; 16] = {t3};");
        println(f"pub global BASE4_ENCODE_5BIT_TABLE: [Field; 32] = {t4};");
        println(f"pub global BASE4_ENCODE_6BIT_TABLE: [Field; 64] = {t5};");
        println(f"pub global BASE4_ENCODE_7BIT_TABLE: [Field; 128] = {t6};");
        println(f"pub global BASE4_ENCODE_8BIT_TABLE: [Field; 256] = {t7};");
        println(f"pub global BASE4_ENCODE_9BIT_TABLE: [Field; 512] = {t8};");
    }
}

unconstrained fn compute_xor_decoding_table() {
    // num bits = 6

    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 & 1) == 1) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 & 1) == 1) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 & 1) == 1) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 & 1) == 1) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 & 1) == 1) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_XOR_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

// choose decoding tables...

// (e and f) xor ((not e) and g)
// step 1: do !e & g

// e g !e&g  (1 - e + g)
// 0 0 0      1
// 0 1 1      2
// 1 0 0      0
// 1 1 0      1

// (1 - e) + g . map 2 to 1, 1 to 0, 0 to 0 (but stay in base4)

// e f (!e & g) f+ (1-e) + (!e & g)
// 0 0 0 0          1
// 0 0 1 1          2
// 0 1 0 0          0
// 0 1 1 1          1
// 1 0 0 0
// 1 0 1 -
// 1 1 0 1
// 1 1 1 -

// (!e & g) + e + f X

// e g (e&f)  result -(e & f) + g - e
// 0 0 0    0           0
// 0 0 1    -           -
// 0 1 0    1           1
// 0 1 1    -           -
// 1 0 0    0           -1
// 1 0 1    1           -2
// 1 1 0    0           0
// 1 1 1    1           1

// (e & f) | g   2g + f
// 0 0 0 0   0
// 0 0 1 1   2
// 0 1 0 0   1
// 0 1 1 1   3
// 1 0 0 0
// 1 0 1 1
// 1 1 0 1
// 1 1 1 1

// | e | f | g | r |(e & f) - f + g|
// | 0 | 0 | 0 | 0 | 0 |
// | 0 | 0 | 1 | 1 | 1 |
// | 0 | 1 | 0 | 0 | -1 |
// | 0 | 1 | 1 | 1 | 0 |
// | 1 | 0 | 0 | 0 | 0 |
// | 1 | 0 | 1 | 0 | -1 |
// | 1 | 1 | 0 | 1 | 0 |
// | 1 | 1 | 1 | 1 | -1 |

// -(e&f) + g - e
// map 0 to 1
// map 1 to 0
// map 2 to 0
// map 3 to 1

// fuck no broken argh
// 3e + 1 - f + 2g
// 2g + 1 - f = 0 to 3
// e f g result  3e + 1 - f + 2g  1 - f + 2g   r             +g    +f   need             (1 - f) + e + g  <- + (1 - f) + g
// 0 0 0 0  0   1   1           1           0           0     0    0     0         1
// 0 0 1 1  1   3   3           2           1           1     2    2     1         1
// 0 1 0 0  1   0   0           0           0           0     0    1     0        0
// 0 1 1 1  2   2   2           1           1           0     1    2     1        1
// 1 0 0 0  1   4   1           2           0           1     1    1     0        1
// 1 0 1 0  2   6   3           3           0           1     2    2     0        0
// 1 1 0 1  2   3   0           1           1           0     0    1     1        1
// 1 1 1 1  3   5   2           2           1           1     2    3     1        1

// 1 and 2 -> 1
// 0 and 3 -> 0

// e f g ()
// I need a lookup that condenses into a single bit: 0 or 1
// if e = 0. 3 maps to 1, 2 maps to 1, 0 maps to 0, 1 maps to 0
// if e = 1. 3 maps to 0, 2 maps to 1, 0 maps to 1, 1 maps to 0

// in both cases. 2 maps to 1, 1 maps to 0

// [result if e=0 , result if e=1]?

// [0,1,2,3] -> [number]

// 0 -> 0
// 1 -> 0
// 2 -> 1
// 3 -> 1

// 0 -> 1
// 1 -> 0
// 2 -> 1
// 3 -> 0

unconstrained fn compute_partial_choose_decoding_table() {
    // num bits = 6
    // !e & g
    // 2e + g -> 1 maps to 0
    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 & 3) == 1) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 & 3) == 1) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 & 3) == 1) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 & 3) == 1) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 & 3) == 1) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_PARTIAL_CHOOSE_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

unconstrained fn compute_majority_decoding_table() {
    // num bits = 6

    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 & 3) > 1) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 & 3) > 1) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 & 3) > 1) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 & 3) > 1) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 & 3) > 1) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_MAJORITY_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

#[test]
fn print_xor_decoding_table() {
    //Safety:
    unsafe { compute_xor_decoding_table() };
}

#[test]
fn print_partial_choose_decoding_table() {
    //Safety:
    unsafe { compute_partial_choose_decoding_table() };
}

#[test]
fn print_majority_decoding_table() {
    //Safety:
    unsafe { compute_majority_decoding_table() };
}

pub global BASE4_PARTIAL_CHOOSE_DECODE_5BIT_TABLE: [Field; 1024] = [
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x0c, 0x0d, 0x0c, 0x0c, 0x0e, 0x0f, 0x0e, 0x0e, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x14, 0x15, 0x14, 0x14, 0x16, 0x17, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x14,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x18, 0x19, 0x18, 0x18, 0x1a, 0x1b, 0x1a, 0x1a, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18,
    0x1c, 0x1d, 0x1c, 0x1c, 0x1e, 0x1f, 0x1e, 0x1e, 0x1c, 0x1d, 0x1c, 0x1c, 0x1c, 0x1d, 0x1c, 0x1c,
    0x18, 0x19, 0x18, 0x18, 0x1a, 0x1b, 0x1a, 0x1a, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18,
    0x18, 0x19, 0x18, 0x18, 0x1a, 0x1b, 0x1a, 0x1a, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x14, 0x15, 0x14, 0x14, 0x16, 0x17, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x14,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x14, 0x15, 0x14, 0x14, 0x16, 0x17, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x14,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x10, 0x11, 0x10, 0x10, 0x12, 0x13, 0x12, 0x12, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x0c, 0x0d, 0x0c, 0x0c, 0x0e, 0x0f, 0x0e, 0x0e, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x0c, 0x0d, 0x0c, 0x0c, 0x0e, 0x0f, 0x0e, 0x0e, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x08, 0x09, 0x08, 0x08, 0x0a, 0x0b, 0x0a, 0x0a, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x04, 0x05, 0x04, 0x04, 0x06, 0x07, 0x06, 0x06, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
];

pub global BASE4_MAJORITY_DECODE_5BIT_TABLE: [Field; 1024] = [
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
    0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f,
];

pub global BASE4_XOR_DECODE_5BIT_TABLE: [Field; 1024] = [
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13,
    0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
    0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f,
];
pub global BASE4_ENCODE_1BIT_TABLE: [Field; 2] = [0, 1];
pub global BASE4_ENCODE_2BIT_TABLE: [Field; 4] = [0, 1, 4, 5];
pub global BASE4_ENCODE_3BIT_TABLE: [Field; 8] = [0, 1, 4, 5, 16, 17, 20, 21];
pub global BASE4_ENCODE_4BIT_TABLE: [Field; 16] =
    [0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85];
pub global BASE4_ENCODE_5BIT_TABLE: [Field; 32] = [
    0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276,
    277, 320, 321, 324, 325, 336, 337, 340, 341,
];
pub global BASE4_ENCODE_6BIT_TABLE: [Field; 64] = [
    0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276,
    277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045,
    1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301,
    1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365,
];
pub global BASE4_ENCODE_7BIT_TABLE: [Field; 128] = [
    0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276,
    277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045,
    1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301,
    1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117,
    4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373,
    4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141,
    5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397,
    5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461,
];
pub global BASE4_ENCODE_8BIT_TABLE: [Field; 256] = [
    0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276,
    277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045,
    1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301,
    1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117,
    4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373,
    4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141,
    5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397,
    5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461, 16384, 16385, 16388, 16389, 16400, 16401, 16404,
    16405, 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469, 16640, 16641, 16644, 16645,
    16656, 16657, 16660, 16661, 16704, 16705, 16708, 16709, 16720, 16721, 16724, 16725, 17408,
    17409, 17412, 17413, 17424, 17425, 17428, 17429, 17472, 17473, 17476, 17477, 17488, 17489,
    17492, 17493, 17664, 17665, 17668, 17669, 17680, 17681, 17684, 17685, 17728, 17729, 17732,
    17733, 17744, 17745, 17748, 17749, 20480, 20481, 20484, 20485, 20496, 20497, 20500, 20501,
    20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565, 20736, 20737, 20740, 20741, 20752,
    20753, 20756, 20757, 20800, 20801, 20804, 20805, 20816, 20817, 20820, 20821, 21504, 21505,
    21508, 21509, 21520, 21521, 21524, 21525, 21568, 21569, 21572, 21573, 21584, 21585, 21588,
    21589, 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781, 21824, 21825, 21828, 21829,
    21840, 21841, 21844, 21845,
];
pub global BASE4_ENCODE_9BIT_TABLE: [Field; 512] = [
    0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276,
    277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045,
    1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301,
    1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117,
    4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373,
    4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141,
    5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397,
    5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461, 16384, 16385, 16388, 16389, 16400, 16401, 16404,
    16405, 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469, 16640, 16641, 16644, 16645,
    16656, 16657, 16660, 16661, 16704, 16705, 16708, 16709, 16720, 16721, 16724, 16725, 17408,
    17409, 17412, 17413, 17424, 17425, 17428, 17429, 17472, 17473, 17476, 17477, 17488, 17489,
    17492, 17493, 17664, 17665, 17668, 17669, 17680, 17681, 17684, 17685, 17728, 17729, 17732,
    17733, 17744, 17745, 17748, 17749, 20480, 20481, 20484, 20485, 20496, 20497, 20500, 20501,
    20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565, 20736, 20737, 20740, 20741, 20752,
    20753, 20756, 20757, 20800, 20801, 20804, 20805, 20816, 20817, 20820, 20821, 21504, 21505,
    21508, 21509, 21520, 21521, 21524, 21525, 21568, 21569, 21572, 21573, 21584, 21585, 21588,
    21589, 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781, 21824, 21825, 21828, 21829,
    21840, 21841, 21844, 21845, 65536, 65537, 65540, 65541, 65552, 65553, 65556, 65557, 65600,
    65601, 65604, 65605, 65616, 65617, 65620, 65621, 65792, 65793, 65796, 65797, 65808, 65809,
    65812, 65813, 65856, 65857, 65860, 65861, 65872, 65873, 65876, 65877, 66560, 66561, 66564,
    66565, 66576, 66577, 66580, 66581, 66624, 66625, 66628, 66629, 66640, 66641, 66644, 66645,
    66816, 66817, 66820, 66821, 66832, 66833, 66836, 66837, 66880, 66881, 66884, 66885, 66896,
    66897, 66900, 66901, 69632, 69633, 69636, 69637, 69648, 69649, 69652, 69653, 69696, 69697,
    69700, 69701, 69712, 69713, 69716, 69717, 69888, 69889, 69892, 69893, 69904, 69905, 69908,
    69909, 69952, 69953, 69956, 69957, 69968, 69969, 69972, 69973, 70656, 70657, 70660, 70661,
    70672, 70673, 70676, 70677, 70720, 70721, 70724, 70725, 70736, 70737, 70740, 70741, 70912,
    70913, 70916, 70917, 70928, 70929, 70932, 70933, 70976, 70977, 70980, 70981, 70992, 70993,
    70996, 70997, 81920, 81921, 81924, 81925, 81936, 81937, 81940, 81941, 81984, 81985, 81988,
    81989, 82000, 82001, 82004, 82005, 82176, 82177, 82180, 82181, 82192, 82193, 82196, 82197,
    82240, 82241, 82244, 82245, 82256, 82257, 82260, 82261, 82944, 82945, 82948, 82949, 82960,
    82961, 82964, 82965, 83008, 83009, 83012, 83013, 83024, 83025, 83028, 83029, 83200, 83201,
    83204, 83205, 83216, 83217, 83220, 83221, 83264, 83265, 83268, 83269, 83280, 83281, 83284,
    83285, 86016, 86017, 86020, 86021, 86032, 86033, 86036, 86037, 86080, 86081, 86084, 86085,
    86096, 86097, 86100, 86101, 86272, 86273, 86276, 86277, 86288, 86289, 86292, 86293, 86336,
    86337, 86340, 86341, 86352, 86353, 86356, 86357, 87040, 87041, 87044, 87045, 87056, 87057,
    87060, 87061, 87104, 87105, 87108, 87109, 87120, 87121, 87124, 87125, 87296, 87297, 87300,
    87301, 87312, 87313, 87316, 87317, 87360, 87361, 87364, 87365, 87376, 87377, 87380, 87381,
];

pub global BASE4_POWERS: [Field; 64] = [
    1,
    0x4,
    0x10,
    0x40,
    0x100,
    0x400,
    0x1000,
    0x4000,
    0x10000,
    0x40000,
    0x100000,
    0x400000,
    0x1000000,
    0x4000000,
    0x10000000,
    0x40000000,
    0x100000000,
    0x400000000,
    0x1000000000,
    0x4000000000,
    0x10000000000,
    0x40000000000,
    0x100000000000,
    0x400000000000,
    0x1000000000000,
    0x4000000000000,
    0x10000000000000,
    0x40000000000000,
    0x100000000000000,
    0x400000000000000,
    0x1000000000000000,
    0x4000000000000000,
    0x10000000000000000,
    0x40000000000000000,
    0x100000000000000000,
    0x400000000000000000,
    0x1000000000000000000,
    0x4000000000000000000,
    0x10000000000000000000,
    0x40000000000000000000,
    0x100000000000000000000,
    0x400000000000000000000,
    0x1000000000000000000000,
    0x4000000000000000000000,
    0x10000000000000000000000,
    0x40000000000000000000000,
    0x100000000000000000000000,
    0x400000000000000000000000,
    0x1000000000000000000000000,
    0x4000000000000000000000000,
    0x10000000000000000000000000,
    0x40000000000000000000000000,
    0x100000000000000000000000000,
    0x400000000000000000000000000,
    0x1000000000000000000000000000,
    0x4000000000000000000000000000,
    0x10000000000000000000000000000,
    0x40000000000000000000000000000,
    0x100000000000000000000000000000,
    0x400000000000000000000000000000,
    0x1000000000000000000000000000000,
    0x4000000000000000000000000000000,
    0x10000000000000000000000000000000,
    0x40000000000000000000000000000000,
];
